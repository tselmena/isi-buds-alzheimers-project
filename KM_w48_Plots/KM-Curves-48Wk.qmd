---
title: "KM Curves for 48 Week"
format: html
editor: visual
author: ER
---

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(survival)
library(survminer)
library(ggplot2)
library(dplyr)
library(broom)
library(purrr)
```

# Read Data & Manipulation

```{r data-read}
#| include: false

setwd('C:/Users/emili/OneDrive - University of Georgia/ISI-BUDS/project-week1/A4SecondaryAnalysis/A4SecondaryAnalysis/A4_ClinicalData/Derived Data')
# Participant characteristics data:
SUBJINFO_raw <- read_csv("SUBJINFO.csv")

# Longitudinal PACC data from Analysis Data Questionnaire Scores (ADQS):
ADQS_raw <- read_csv("ADQS.csv")

SPINFO_raw <- read_csv("C:/Users/emili/OneDrive - University of Georgia/ISI-BUDS/project-week1/A4SecondaryAnalysis/A4SecondaryAnalysis/A4_ClinicalData/Raw Data/spinfo.csv")

CDR_raw <- read_csv("C:/Users/emili/OneDrive - University of Georgia/ISI-BUDS/project-week1/A4SecondaryAnalysis/A4SecondaryAnalysis/A4_ClinicalData/Raw Data/cdr.csv")

w48_data <- read_csv("C:/Users/emili/OneDrive - University of Georgia/ISI-BUDS/project-week1/W48_Raw_And_Delta_Data.csv")

```

```{r data-manipulation}
#| include: false

# Outcomes collected at Visit 1
V1OUTCOME <- ADQS_raw |>
  filter(VISITCD == "001") %>%
  select(BID, QSTESTCD, QSSTRESN) %>%
  pivot_wider(values_from = QSSTRESN, names_from = QSTESTCD)

# Outcomes collected at Visit 6
V6OUTCOME <- ADQS_raw %>%
  filter(VISITCD == "006") %>%
  select(BID, QSTESTCD, QSSTRESN) %>%
  pivot_wider(values_from = QSSTRESN, names_from = QSTESTCD)

SUBJINFO <- SUBJINFO_raw %>%
  left_join(V6OUTCOME, by = "BID") %>%
  left_join(V1OUTCOME %>%
      select(BID, CDRSB, CFITOTAL, CFISP, CFIPT, ADLPQPT, ADLPQSP, ADLTOTAL), 
    by = "BID") %>%
  mutate(
    AGECAT = case_when(AGEYR < 65 ~ "Age < 65",
      AGEYR >= 65 & AGEYR < 75 ~ "65 <= Age < 75",
      AGEYR >= 75 & AGEYR < 85 ~ "75 <= Age < 85",
      AGEYR >= 85 ~ "Age >= 85"),
    SEX = factor(case_when(
      SEX == 1 ~ "Female",
      SEX == 2 ~ "Male"), levels = c("Male", "Female")),
    RACE = case_when(RACE == 1 ~ "White",
      RACE == 2 ~ "Black or African American",
      RACE == 58 ~ "Asian",
      RACE == 79 ~ "Native Hawaiian or Other Pacific Islander",
      RACE == 84 ~ "American Indian or Alaskan Native",
      RACE == 97 ~ "Unknown or Not Reported",
      RACE == 100 ~ "More than one race"),
    MARITAL = case_when(MARITAL == 2 ~ "Divorced",
      MARITAL == 4 ~ "Never married",
      MARITAL == 5 ~ "Widowed",
      MARITAL == 11 ~ "Married",
      MARITAL == 97 ~ "Unknown or Not Reported"),
    ETHNIC = case_when(ETHNIC == 50 ~ "Hispanic or Latino",
      ETHNIC == 56 ~ "Not Hispanic or Latino",
      ETHNIC == 97 ~ "Unknown or Not reported"),
    ALCHLBL = case_when(ALCHLBL == 0 ~ "No",
      ALCHLBL == 1 ~ "Yes"),
    CFBL = case_when(CFBL == 0 ~ "No",
      CFBL == 1 ~ "Yes"),
    TBBL = case_when(TBBL == 0 ~ "No",
      TBBL == 1 ~ "Yes"),
    WRKRET = case_when(WRKRET == 1 ~ "Yes",
      WRKRET == 0 ~ "No",
      WRKRET == 96 ~ "Not Applicable"),
    APOEGNPRSNFLG = case_when(APOEGNPRSNFLG == 1 ~ "Yes",
      APOEGNPRSNFLG == 0 ~ "No"),
    AGEYR = as.numeric(AGEYR),
    SUVRCER = as.numeric(SUVRCER),
    AMYLCENT = as.numeric(AMYLCENT),
    EDCCNTU = as.numeric(EDCCNTU),
    COGDSSTTSV6 = as.numeric(COGDSSTTSV6),
    COGLMDRTSV6 = as.numeric(COGLMDRTSV6),
    TX = factor(TX, levels = c("Placebo", "Solanezumab")),
    COMPLETER_label = case_when(
      SUBJCOMPTR == 1 ~ "Completer",
      TRUE ~ "Dropout"))

# Filter for placebo group
SUBJINFO_PLAC <- SUBJINFO %>% 
  filter(TX %in% "Placebo")

placebo_bids <- SUBJINFO_PLAC$BID
```

```{r}
#| include: false
# prep raw CDR file for use
CDR_ind <- CDR_raw |> 
  select(c("BID", "CDGLOBAL","CDADTC_DAYS_T0", "EPOCH", "CDDY", "CDEVENT")) |> 
  filter(BID %in% placebo_bids) |>
  mutate(
    WEEK = CDADTC_DAYS_T0 / 7
  ) |> 
  filter(WEEK <= 252)

# defining our target weeks and the window size
target_weeks <- c(48, 108, 168, 204, 240)
window_weeks <- 12 

CDR_closest_week_windowed <- CDR_ind |>
  # for each visit, calculate its distance to ALL target weeks
  mutate(distance_to_target = map(WEEK, ~abs(.x - target_weeks))) |>
  unnest(distance_to_target) |>
  
  # identify which target week is the closest for that visit
  group_by(BID, WEEK, CDGLOBAL) |>
  mutate(target_week = target_weeks[which.min(distance_to_target)]) |>
  ungroup() |> 

  filter(abs(WEEK - target_week) <= window_weeks) |>

  # for each subject and target week, if there happen to be
  # multiple visits in the window, keep the single closest one
  group_by(BID, target_week) |>
  slice_min(n = 1, order_by = abs(WEEK - target_week), with_ties = FALSE) |>
  ungroup() |> 
  mutate(
    range = target_week - WEEK
  )

wide_cdr_indicator <- CDR_closest_week_windowed |>
  mutate(
    CD_indicator = if_else(CDGLOBAL > 0, 1, 0)
  ) |>
  select(BID, target_week, CD_indicator) |> 
  pivot_wider(
    names_from = target_week,
    values_from = CD_indicator, 
    names_prefix = "CDPOS_W",   
    values_fill = NA 
  ) 

# when is the first time of global cdr conversion?
conversion_times <- 
  CDR_closest_week_windowed |>
  filter(CDGLOBAL > 0) |>
  group_by(BID) |>
  summarise(
    CDRCONV_WEEK = min(WEEK)
  )

# final dataframe with indicator + min time to global cdr conversion
wide_cdr_indicator <- left_join(wide_cdr_indicator, conversion_times, by = "BID") 
```

```{r}
#| include: false
# ---- Get time-to-event + event indicator ----
surv_data <- SUBJINFO_PLAC |>
  select(BID) |>
  left_join(conversion_times |> select(BID, time_to_event = CDRCONV_WEEK), by = "BID") |>
  mutate(
    event = if_else(is.na(time_to_event), 0L, 1L),
    time_to_event = if_else(is.na(time_to_event), 240, time_to_event)
  )
target_times <- c(48, 108, 168, 204, 240)

surv_data <- surv_data %>%
  mutate(
    closest_time_val = map_dbl(time_to_event, ~ target_times[which.min(abs(.x - target_times))])
  )
test_vars <- c("MMSE", "ADLTOTAL", "LMIIa", "PACC", "DIGIT", "CFITOTAL", "CFISP", "CFIPT", "ADLPQPT", "ADLPQSP")

test_scores <- ADQS_raw |>
  filter(QSTESTCD %in% test_vars) |>
  select(BID, QSTESTCD, QSSTRESN, ADURW)
baseline_cdglobal_summary <- CDR_raw |>
  filter(VISCODE == "001") |>
  group_by(CDGLOBAL) |>
  summarise(
    n = n()
  ) |>
  arrange(CDGLOBAL)
```

```{r CDR PROGRESSION}
#| include: false
# Step 1: For those who progressed, get the earliest progression day per BID
cdr_progression_weeks <- CDR_ind %>%
  filter(EPOCH != "OPEN LABEL TREATMENT") %>%  # remove open label
  filter(CDEVENT == 1) %>%                      # only progressed events
  group_by(BID) %>%
  slice_min(order_by = CDDY, n = 1, with_ties = FALSE) %>%  # earliest progression
  ungroup() %>%
  mutate(Progression_Week = CDDY / 7) %>%
  select(BID, Progression_Week)

# Step 2: Get the full list of unique BIDs observed (excluding open label)
all_subjects <- CDR_ind %>%
  filter(EPOCH != "OPEN LABEL TREATMENT") %>%
  distinct(BID)

# Step 3: Join progression weeks back onto all subjects, preserving all BIDs
cdr_progression_complete <- all_subjects %>%
  left_join(cdr_progression_weeks, by = "BID")

```

```{r}
#| include: false
adqs_placebo <- ADQS_raw %>%
  filter(TX == "Placebo") %>%
  select(BID, QSTESTCD, QSTEST, QSCHANGE, ADURW)

# Step 2: Merge with cdr_progression_complete by BID
final_data <- cdr_progression_complete %>%
  left_join(adqs_placebo, by = "BID")
make_wide_test_scores <- function(adqs_data, test_code, target_weeks, window_weeks) {
  is_cfi_adl <- test_code %in% c("CFITOTAL", "CFISP", "CFIPT", "ADLTOTAL", "ADLPQPT", "ADLPQSP")
  
  # Filter & clean test data, using QSCHANGE
  test_data <- adqs_data |>
    filter(toupper(QSTESTCD) == test_code, TX == "Placebo") |>
    select(BID, WEEK = ADURW, SCORE = QSCHANGE) |>
    filter(!is.na(WEEK), !is.na(SCORE))
  
  if (nrow(test_data) == 0) return(NULL)
  
  # Closest visit to each target week
  closest <- test_data |>
    mutate(
      tmp = map(WEEK, ~ abs(.x - target_weeks)),
      target_week = map_int(tmp, ~ target_weeks[which.min(.x)])
    ) |>
    select(-tmp) |>
    filter(abs(WEEK - target_week) <= window_weeks) |>
    group_by(BID, target_week) |>
    slice_min(order_by = abs(WEEK - target_week), n = 1, with_ties = FALSE) |>
    ungroup()

  # Remove all baseline timepoints (e.g., week 0 or screening)
  followup <- closest |>
    filter(target_week > 0)

  # Pivot follow-up into wide format
  wide_followup <- followup |>
    mutate(varname = paste0(test_code, "_", target_week)) |>
    select(BID, varname, SCORE) |>
    pivot_wider(names_from = varname, values_from = SCORE)

  return(wide_followup)
}

test_codes <- c("MMSE", "ADLTOTAL", "ADLPQPT", "LMIIA", "CFITOTAL", 
                "ADLPQSP", "CFISP", "PACC", "DIGIT", "CFIPT", "FCSRT96")

target_weeks <- c(0, 48, 108, 168, 204, 240)

# Generate and reduce all wide test datasets
wide_tests_combined <- purrr::map(test_codes, ~ make_wide_test_scores(
  adqs_data = ADQS_raw,
  test_code = .x,
  target_weeks = target_weeks,
  window_weeks = 14
)) |>
  reduce(full_join, by = "BID")
wide_tests_combined <- wide_tests_combined %>%
  left_join(cdr_progression_complete, by = "BID")
# Create final survival dataset
survival_data <-  wide_tests_combined %>%
  mutate(
    time_to_event = ifelse(is.na(Progression_Week), 240, pmin(Progression_Week, 240)),
    event_indicator = ifelse(!is.na(Progression_Week) & Progression_Week <= 240, 1, 0))

```

# Function for CFI Tests

```{r}
# ---- KM Function for CFI Tests (Higher scores = worse outcomes) ----
run_km_cfi <- function(test_name) {
  # Create the variable name
  test_var <- paste0(test_name, "_W48")
  
  # Check if variable exists
  if (!test_var %in% colnames(w48_data)) {
    stop(paste("Variable", test_var, "not found"))
  }
  
  # Merge w48 data with survival data and create quartiles
  # For CFI: Q1 = lowest scores = best outcomes
  km_data <- survival_data %>%
    inner_join(w48_data %>% select(BID, !!sym(test_var)), by = "BID") %>%
    drop_na(!!sym(test_var)) %>%
    mutate(
      Quartile = factor(ntile(.data[[test_var]], 4), 
                       levels = 1:4, 
                       labels = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"))
    )
  
  
  
  # Fit and plot
  fit <- survfit(Surv(time_to_event, event_indicator) ~ Quartile, data = km_data)
  
  ggsurvplot(
    fit,
    data = km_data,
    title = paste("KM Curve for", test_name, "(Week 48) - CFI Test"),
    xlab = "Weeks",
    ylab = "CDR-Free Probability", 
    xlim = c(0, 240),
    break.time.by = 48,
    risk.table = TRUE,
    pval = TRUE,
    legend.title = paste(test_name, "Quartiles"),
    legend.labs = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"),
    palette = c("#2E8B57", "#4682B4", "#DAA520", "#DC143C")
  )
}

# CFI tests
print(run_km_cfi("CFITOTAL"))
print(run_km_cfi("CFIPT"))
print(run_km_cfi("CFISP"))
```

## Save to PNG

```{r}
# ---- KM Function for CFI Tests with PNG Saving ----
run_km_cfi_and_save_png <- function(test_name) {
  test_var <- paste0(test_name, "_W48")
  
  if (!test_var %in% colnames(w48_data)) {
    warning(paste("Variable", test_var, "not found. Skipping."))
    return(NULL)
  }
  
  km_data <- survival_data %>%
    inner_join(w48_data %>% select(BID, !!sym(test_var)), by = "BID") %>%
    drop_na(!!sym(test_var)) %>%
    mutate(
      Quartile = factor(ntile(.data[[test_var]], 4),
                        levels = 1:4,
                        labels = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"))
    )
  
  fit <- survfit(Surv(time_to_event, event_indicator) ~ Quartile, data = km_data)
  
  surv_plot <- ggsurvplot(
    fit,
    data = km_data,
    title = paste("KM Curve for", test_name, "(Week 48) - CFI Test"),
    xlab = "Weeks",
    ylab = "CDR-Free Probability", 
    xlim = c(0, 240),
    break.time.by = 48,
    risk.table = TRUE,
    pval = TRUE,
    legend.title = paste(test_name, "Quartiles"),
    legend.labs = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"),
    palette = c("#2E8B57", "#4682B4", "#DAA520", "#DC143C")
  )
  
  filename <- paste0("KM_", test_name, "_W48_CFI.png")
  ggsave(filename, plot = surv_plot$plot, width = 8, height = 6, dpi = 300)
  message("Saved: ", filename)
}

# ---- Batch Save for CFI Tests ----
cfi_tests <- c("CFITOTAL", "CFIPT", "CFISP")
walk(cfi_tests, run_km_cfi_and_save_png)
```

# Function for All Other Tests

```{r}
# ---- KM Function for Other Tests (Lower scores = worse outcomes) ----
run_km_all_noCFI <- function(test_name) {
  # Create the variable name
  test_var <- paste0(test_name, "_W48")
  
  # Check if variable exists
  if (!test_var %in% colnames(w48_data)) {
    stop(paste("Variable", test_var, "not found"))
  }
  
  # Merge w48 data with survival data and create REVERSED quartiles
  # For other tests: Q1 = highest scores = best outcomes
  km_data <- survival_data %>%
    inner_join(w48_data %>% select(BID, !!sym(test_var)), by = "BID") %>%
    drop_na(!!sym(test_var)) %>%
    mutate(
      Quartile_raw = ntile(.data[[test_var]], 4),
      Quartile = factor(5 - Quartile_raw, levels = 1:4, 
                       labels = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"))
    )
  
  
  # Fit and plot
  fit <- survfit(Surv(time_to_event, event_indicator) ~ Quartile, data = km_data)
  
  ggsurvplot(
    fit,
    data = km_data,
    title = paste("KM Curve for", test_name, "(Week 48) - Cognitive Test"),
    xlab = "Weeks",
    ylab = "CDR-Free Probability",
    xlim = c(0, 240),
    break.time.by = 48,
    risk.table = TRUE,
    pval = TRUE,
    legend.title = paste(test_name, "Quartiles"),
    legend.labs = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"),
    palette = c("#2E8B57", "#4682B4", "#DAA520", "#DC143C")
  )
}

other_tests <- c("ADLPQPT", "ADLPQSP", "ADLTOTAL", "DIGIT", "FCSRT96", "LMIIA", "MMSE", "PACC")

# Other tests (higher scores = better outcomes) 
print(run_km_all_noCFI("ADLPQSP"))
print(run_km_all_noCFI("PACC"))
print(run_km_all_noCFI("FCSRT96"))
```

## Save to PNG

```{r}
# ---- KM Function that Saves PNGs for Each Test ----
run_km_and_save_png <- function(test_name) {
  test_var <- paste0(test_name, "_W48")
  
  if (!test_var %in% colnames(w48_data)) {
    warning(paste("Variable", test_var, "not found. Skipping."))
    return(NULL)
  }
  
  km_data <- survival_data %>%
    inner_join(w48_data %>% select(BID, !!sym(test_var)), by = "BID") %>%
    drop_na(!!sym(test_var)) %>%
    mutate(
      Quartile_raw = ntile(.data[[test_var]], 4),
      Quartile = factor(5 - Quartile_raw, levels = 1:4,
                        labels = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"))
    )
  
  fit <- survfit(Surv(time_to_event, event_indicator) ~ Quartile, data = km_data)
  
  surv_plot <- ggsurvplot(
    fit,
    data = km_data,
    title = paste("KM Curve for", test_name, "(Week 48) - Cognitive Test"),
    xlab = "Weeks",
    ylab = "CDR-Free Probability",
    xlim = c(0, 240),
    break.time.by = 48,
    risk.table = TRUE,
    pval = TRUE,
    legend.title = paste(test_name, "Quartiles"),
    legend.labs = c("Q1 (Best)", "Q2", "Q3", "Q4 (Worst)"),
    palette = c("#2E8B57", "#4682B4", "#DAA520", "#DC143C")
  )
  
  filename <- paste0("KM_", test_name, "_W48.png")
  ggsave(filename, plot = surv_plot$plot, width = 8, height = 6, dpi = 300)
  message("Saved: ", filename)
}

# ---- Batch Save ----
other_tests <- c("ADLPQPT", "ADLPQSP", "ADLTOTAL", "DIGIT", "FCSRT96", "LMIIA", "MMSE", "PACC")
walk(other_tests, run_km_and_save_png)

```
