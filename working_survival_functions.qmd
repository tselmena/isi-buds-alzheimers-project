---
title: "c3-ptau-work"
format: html
author: "Tselmen Anuurad"
---

```{r}
library(tidyverse)
library(table1)
library(dplyr)
library(tidyr) 
library(purrr) 
library(ggplot2)
library(patchwork)
library(broom)
library(stringr)
library(knitr)
library(kableExtra)
library(ggrepel)
library(DescTools)
```

```{r}
base_path <- "/Users/christopherturner/Documents/ISI-BUDS/Research_Gillen/A4SecondaryAnalysis/A4_ClinicalData/Raw Data/"
derived_path <- "/Users/christopherturner/Documents/ISI-BUDS/Research_Gillen/A4SecondaryAnalysis/A4_ClinicalData/Derived Data/"
external_path<-"/Users/christopherturner/Documents/ISI-BUDS/Research_Gillen/A4SecondaryAnalysis/A4_ClinicalData/External Data/"
CDR_raw <- read_csv(file.path(base_path, "cdr.csv"))
ADQS_raw <- read_csv(file.path(derived_path, "ADQS.csv"))
SUBJINFO_raw <- read_csv(file.path(derived_path, "SUBJINFO.csv"))
C3_raw <- read_csv(file.path(external_path, "cogstate_battery.csv"))
```

```{r}
# Outcomes collected at Visit 1
V1OUTCOME <- ADQS_raw %>%
  filter(VISITCD == "001") %>%
  select(BID, QSTESTCD, QSSTRESN) %>%
  pivot_wider(values_from = QSSTRESN, names_from = QSTESTCD)

# Outcomes collected at Visit 6
V6OUTCOME <- ADQS_raw %>%
  filter(VISITCD == "006") %>%
  select(BID, QSTESTCD, QSSTRESN) %>%
  pivot_wider(values_from = QSSTRESN, names_from = QSTESTCD)

SUBJINFO <- SUBJINFO_raw %>%
  left_join(V6OUTCOME, by = "BID") %>%
  left_join(V1OUTCOME %>%
      select(BID, CDRSB, CFITOTAL, CFISP, CFIPT, ADLPQPT, ADLPQSP), 
    by = "BID") %>%
  mutate(
    AGECAT = case_when(AGEYR < 65 ~ "Age < 65",
      AGEYR >= 65 & AGEYR < 75 ~ "65 <= Age < 75",
      AGEYR >= 75 & AGEYR < 85 ~ "75 <= Age < 85",
      AGEYR >= 85 ~ "Age >= 85"),
    SEX = factor(case_when(
      SEX == 1 ~ "Female",
      SEX == 2 ~ "Male"), levels = c("Male", "Female")),
    RACE = case_when(RACE == 1 ~ "White",
      RACE == 2 ~ "Black or African American",
      RACE == 58 ~ "Asian",
      RACE == 79 ~ "Native Hawaiian or Other Pacific Islander",
      RACE == 84 ~ "American Indian or Alaskan Native",
      RACE == 97 ~ "Unknown or Not Reported",
      RACE == 100 ~ "More than one race"),
    MARITAL = case_when(MARITAL == 2 ~ "Divorced",
      MARITAL == 4 ~ "Never married",
      MARITAL == 5 ~ "Widowed",
      MARITAL == 11 ~ "Married",
      MARITAL == 97 ~ "Unknown or Not Reported"),
    ETHNIC = case_when(ETHNIC == 50 ~ "Hispanic or Latino",
      ETHNIC == 56 ~ "Not Hispanic or Latino",
      ETHNIC == 97 ~ "Unknown or Not reported"),
    ALCHLBL = case_when(ALCHLBL == 0 ~ "No",
      ALCHLBL == 1 ~ "Yes"),
    CFBL = case_when(CFBL == 0 ~ "No",
      CFBL == 1 ~ "Yes"),
    TBBL = case_when(TBBL == 0 ~ "No",
      TBBL == 1 ~ "Yes"),
    WRKRET = case_when(WRKRET == 1 ~ "Yes",
      WRKRET == 0 ~ "No",
      WRKRET == 96 ~ "Not Applicable"),
    APOEGNPRSNFLG = case_when(APOEGNPRSNFLG == 1 ~ "Yes",
      APOEGNPRSNFLG == 0 ~ "No"),
    AGEYR = as.numeric(AGEYR),
    SUVRCER = as.numeric(SUVRCER),
    AMYLCENT = as.numeric(AMYLCENT),
    EDCCNTU = as.numeric(EDCCNTU),
    COGDSSTTSV6 = as.numeric(COGDSSTTSV6),
    COGLMDRTSV6 = as.numeric(COGLMDRTSV6),
    TX = factor(TX, levels = c("Placebo", "Solanezumab")),
    COMPLETER_label = case_when(
      SUBJCOMPTR == 1 ~ "Completer",
      TRUE ~ "Dropout"))

# Filter ADQS_raw for PACC collected in the blinded phases among mITT population
ADQS_PACC <- ADQS_raw %>%
  filter(MITTFL== 1) %>%
  filter(EPOCH == "BLINDED TREATMENT" | AVISIT == "006") %>%
  filter(QSTESTCD == "PACC") %>%
  rename(PACC = QSSTRESN) %>%
  select(BID, ASEQNCS, TX, ADURW, TX, AGEYR, 
    AAPOEGNPRSNFLG, EDCCNTU, SUVRCER, QSVERSION, PACC) %>%
  mutate(TX = factor(TX, levels = c("Placebo", "Solanezumab"))) %>%
  na.omit()

# placebo group SUBJINFO
SUBJINFO_PLAC <- SUBJINFO |> 
  filter(TX %in% "Placebo")

placebo_bids <- SUBJINFO_PLAC$BID
```


## 12 Week Window Indicator Table

```{r}
# prep raw CDR file for use
CDR_ind <- CDR_raw |> 
  select(c("BID", "CDGLOBAL","CDADTC_DAYS_T0", "EPOCH", "CDDY", "CDEVENT")) |> 
  filter(BID %in% placebo_bids) |>
  mutate(
    WEEK = CDADTC_DAYS_T0 / 7
  ) |> 
  filter(WEEK <= 252)

# defining our target weeks and the window size
target_weeks <- c(48, 108, 168, 204, 240)
window_weeks <- 12 

CDR_closest_week_windowed <- CDR_ind |>
  # for each visit, calculate its distance to ALL target weeks
  mutate(distance_to_target = map(WEEK, ~abs(.x - target_weeks))) |>
  unnest(distance_to_target) |>
  
  # identify which target week is the closest for that visit
  group_by(BID, WEEK, CDGLOBAL) |>
  mutate(target_week = target_weeks[which.min(distance_to_target)]) |>
  ungroup() |> 

  filter(abs(WEEK - target_week) <= window_weeks) |>

  # for each subject and target week, if there happen to be
  # multiple visits in the window, keep the single closest one
  group_by(BID, target_week) |>
  slice_min(n = 1, order_by = abs(WEEK - target_week), with_ties = FALSE) |>
  ungroup() |> 
  mutate(
    range = target_week - WEEK
  )

wide_cdr_indicator <- CDR_closest_week_windowed |>
  mutate(
    CD_indicator = if_else(CDGLOBAL > 0, 1, 0)
  ) |>
  select(BID, target_week, CD_indicator) |> 
  pivot_wider(
    names_from = target_week,
    values_from = CD_indicator, 
    names_prefix = "CDPOS_W",   
    values_fill = NA 
  ) 

# when is the first time of global cdr conversion?
conversion_times <- 
  CDR_closest_week_windowed |>
  filter(CDGLOBAL > 0) |>
  group_by(BID) |>
  summarise(
    CDRCONV_WEEK = min(WEEK)
  )

# final dataframe with indicator + min time to global cdr conversion
wide_cdr_indicator <- left_join(wide_cdr_indicator, conversion_times, by = "BID") 
```

07/19 

```{r}
# adqs_data <- ADQS_raw
# test_code <- "ADLTOTAL"
# outcome_data <- wide_cdr_indicator
target_weeks <- c(0, 48, 108, 168, 204, 240)

process_and_model_delta_scores <- function(adqs_data, test_code, target_weeks, window_weeks, outcome_data, outcome_var) {
  
  # --- 1. Data Preparation ---
  test_data <- adqs_data |>
    filter(toupper(QSTESTCD) == test_code, TX == "Placebo") |>
    select(BID, WEEK = ADURW, SCORE = QSSTRESN) |>
    filter(!is.na(WEEK), !is.na(SCORE))
  
  if (nrow(test_data) == 0) {
    return(NULL)
  }
  
  # --- 2. Find Closest Visit within Window for All Timepoints ---
  closest <- test_data |>
    mutate(
      tmp = map(WEEK, ~ abs(.x - target_weeks)),
      target_week = map_int(tmp, ~ target_weeks[which.min(.x)])
    ) |>
    select(-tmp) |>
    filter(abs(WEEK - target_week) <= window_weeks) |>
    group_by(BID, target_week) |>
    slice_min(order_by = abs(WEEK - target_week), n = 1, with_ties = FALSE) |>
    ungroup()
  
  # --- 3. Identify Best Baseline and Pivot Follow-up Scores ---
  # This logic selects the best baseline for each subject (Week 0 or screening).
  baseline_scores <- closest |>
    filter(target_week <= 0) |>
    group_by(BID) |>
    slice_max(order_by = target_week, n = 1, with_ties = FALSE) |>
    ungroup() |>
    select(BID, baseline_score = SCORE, target_week)
  
  # Pivot only the follow-up scores into a wide format.
  wide_followup_scores <- closest |>
    filter(target_week > 0) |>
    select(BID, target_week, SCORE) |>
    pivot_wider(
      id_cols = BID,
      names_from = target_week,
      values_from = SCORE,
      names_prefix = paste0(test_code, "_W")
    )
  
  # --- 4. Join Baseline and Calculate Deltas ---
  # Join the single baseline score and calculate deltas from it.
  wide_scores_with_deltas <- wide_followup_scores |>
    inner_join(baseline_scores, by = "BID") |>
    mutate(across(
      .cols = starts_with(paste0(test_code, "_W")),
      .fns = ~ .x - baseline_score,
      .names = "delta_{.col}"
    ))
  
  # --- Prepare Final Data for Modeling ---
  model_data <- wide_scores_with_deltas |>
    inner_join(
      outcome_data |> select(BID, all_of(outcome_var)),
      by = "BID"
    ) |>
    filter(!is.na(.data[[outcome_var]]))
  
  # --- 6. Run Univariate Logistic Regression for Each Delta (Original Logic) ---
  delta_vars <- model_data |>
    select(starts_with("delta_")) |>
    names()
  
  models_results <- map(delta_vars, function(var) {
    formula <- as.formula(paste(outcome_var, "~", var))
    
    model <- tryCatch(
      glm(formula, data = model_data, family = binomial()),
      error = function(e) NULL
    )
    
    if (is.null(model)) return(NULL)
    
    # Use broom::tidy() to get a clean summary of the model.
    tidy(model, exponentiate = TRUE, conf.int = TRUE) |>
      filter(term != "(Intercept)") |>
      mutate(
        predictor_variable = var,
        n = nobs(model)
      )
  }) |>
    compact() |>
    bind_rows()
  
  # --- 7. Format Final Results Table (Original Logic) ---
  if (nrow(models_results) > 0) {
    final_results <- models_results |>
      mutate(
        test = test_code,
        week = as.integer(str_extract(predictor_variable, "\\d+$"))
      ) |>
      rename(
        OddsRatio = estimate,
        LowerCI = conf.low,
        UpperCI = conf.high,
        p_value = p.value
      ) |>
      select(test, week, n, predictor_variable, OddsRatio, LowerCI, UpperCI, p_value)
    
    return(final_results)
  } else {
    return(NULL)
  }
}
```

## Running the function:

```{r}
# 1. Define your parameters
test_codes_to_run <- c("MMSE", "ADLTOTAL", "ADLPQPT", "LMIIA", "CFITOTAL", 
                       "ADLPQSP", "CFISP", "PACC", "DIGIT", "CFIPT", "FCSRT96")

# This vector MUST include 0 because this function version hardcodes Week 0 as the baseline.
target_weeks_for_analysis <- c(0, 48, 108, 168, 204, 240)


# 2. Call the function for each test
# This assumes your raw data is in a frame named 'ADQS_raw' and your outcome data is in 'wide_cdr_indicator'.
# Replace these with your actual data frame names if they are different.

all_results <- purrr::map_dfr(test_codes_to_run, ~process_and_model_delta_scores(
  adqs_data = ADQS_raw,
  test_code = toupper(.x),
  target_weeks = target_weeks_for_analysis,
  window_weeks = 14,
  outcome_data = wide_cdr_indicator,
  outcome_var = "CDPOS_W240"
))

print(all_results)
```

## UPDATED PLOT 07/20 to go with the above

```{r}
# Define the map from variable names to display names
test_name_map <- c(
  "ADLPQPT" = "ADL Patient Questionnaire",
  "ADLPQSP" = "ADL Study Partner Questionnaire",
  "ADLTOTAL" = "ADL Total",
  "CFIPT" = "CFI Patient",
  "CFISP" = "CFI Study Partner",
  "CFITOTAL" = "CFI Total",
  "DIGIT" = "Digit Symbol Substitution",
  "FCSRT96" = "FCSRT-IR",
  "LMIIA" = "Logical Memory IIa",
  "MMSE" = "MMSE",
  "PACC" = "PACC"
)

if (!is.null(all_results) && nrow(all_results) > 0) {

  # --- Data Preparation ---
  
  # IMPORTANT: This code assumes your 'all_results' dataframe has a column named 'n' 
  # for the sample size. If your column is named differently, please update the 
  # 'aes(label = ...)' part in the geom_text() layers below.

  plot_data <- all_results |>
    mutate(test = factor(test, levels = toupper(sort(test_codes_to_run))))

  # 1. Split the data into two groups
  cfi_tests <- c("CFITOTAL", "CFIPT", "CFISP")
  cfi_data <- plot_data |> filter(test %in% cfi_tests)
  other_data <- plot_data |> filter(!test %in% cfi_tests)
  
  # --- Plot 1: CFI Tests ---
  
  if (nrow(cfi_data) > 0) {
    cfi_plot <- ggplot(cfi_data, aes(x = week, y = OddsRatio)) +
      geom_hline(yintercept = 1,
                 linetype = "dashed",
                 color = "grey40") +
      geom_errorbar(aes(ymin = LowerCI, ymax = UpperCI),
                    width = 10,
                    color = "grey50") +
      geom_line(aes(group = 1), color = "#005f73") +
      geom_point(color = "#005f73", size = 2.5) +
      # 2. Add sample size text below the points
      geom_text_repel(
        # Key change: Use the LowerCI value for the y-position
        aes(y = LowerCI, label = paste0("n=", n)),
        
        # Nudge text slightly down from the end of the error bar
        nudge_y = -0.08,
        
        # Hide the connector lines for a cleaner look
        min.segment.length = Inf,
        
        # Other styling options
        direction = "y",
        # You can restrict direction to just vertical
        size = 3,
        color = "grey30"
      )  +
      facet_wrap(
        ~ test,
        scales = "fixed",
        ncol = 3,
        labeller = as_labeller(test_name_map)
      ) +
      labs(
        title = "Odds Ratios for CFI Tests with Increasing Scores",
        subtitle = "Based on change from baseline in cognitive scores at earlier timepoints",
        x = "Week of Assessment",
        y = expression("Odds Ratio (e"^beta * ")")
      ) +
      scale_x_continuous(breaks = target_weeks, limits = c(24, 264)) +
      theme_bw(base_size = 12) +
      theme(
        strip.background = element_blank(),
        strip.text = element_text(face = "bold"),
        panel.grid.minor = element_blank()
      )
    print(cfi_plot)
  }

  # --- Plot 2: Remaining Tests ---
  
  if (nrow(other_data) > 0) {
    other_plot <- ggplot(other_data, aes(x = week, y = OddsRatio)) +
      geom_hline(yintercept = 1, linetype = "dashed", color = "grey40") +
      geom_errorbar(aes(ymin = LowerCI, ymax = UpperCI), width = 10, color = "grey50") +
      geom_line(aes(group = 1), color = "#005f73") +  
      geom_point(color = "#005f73", size = 2.5) +
      # 2. Add sample size text below the points
      geom_text_repel(
        # Key change: Use the LowerCI value for the y-position
        aes(y = LowerCI, label = paste0("n=", n)),
        
        # Nudge text slightly down from the end of the error bar
        nudge_y = -0.08,
        
        # Hide the connector lines for a cleaner look
        min.segment.length = Inf,
        
        # Other styling options
        direction = "y",
        # You can restrict direction to just vertical
        size = 3,
        color = "grey30"
      ) +
      facet_wrap(~ test, scales = "fixed", ncol = 3, labeller = as_labeller(test_name_map)) +
      labs(
        title = "Odds Ratios for Remaining Cognitive Tests",
        subtitle = "Based on change from baseline in cognitive scores at earlier timepoints",
        x = "Week of Assessment",
        y = expression("Odds Ratio (e"^beta*")")
      ) +
      scale_x_continuous(breaks = target_weeks, limits = c(24, 264)) +
      theme_bw(base_size = 12) +
      theme(
        strip.background = element_blank(),
        strip.text = element_text(face = "bold"),
        panel.grid.minor = element_blank()
      )
    
    print(other_plot)
  }
}

ggsave(
  # The name of the file you want to create
  filename = "other_plot.png", 
  
  # The plot object to save
  plot = other_plot, 
  
  # Dimensions of the saved image
  width = 11, 
  height = 9, 
  units = "in", # units can be "in", "cm", "mm", or "px"
  
  # Resolution in dots per inch (300 is good for documents)
  dpi = 300 
)
```


```{r}
# ---- Get time-to-event + event indicator ----
surv_data <- SUBJINFO_PLAC |>
  select(BID) |>
  left_join(conversion_times |> select(BID, time_to_event = CDRCONV_WEEK), by = "BID") |>
  mutate(
    event = if_else(is.na(time_to_event), 0L, 1L),
    time_to_event = if_else(is.na(time_to_event), 240, time_to_event)
  )
target_times <- c(48, 108, 168, 204, 240)

surv_data <- surv_data %>%
  mutate(
    closest_time_val = map_dbl(time_to_event, ~ target_times[which.min(abs(.x - target_times))])
  )
test_vars <- c("MMSE", "ADLTOTAL", "LMIIa", "PACC", "DIGIT", "CFITOTAL", "CFISP", "CFIPT", "ADLPQPT", "ADLPQSP")

test_scores <- ADQS_raw |>
  filter(QSTESTCD %in% test_vars) |>
  select(BID, QSTESTCD, QSSTRESN, ADURW)
baseline_cdglobal_summary <- CDR_raw |>
  filter(VISCODE == "001") |>
  group_by(CDGLOBAL) |>
  summarise(
    n = n()
  ) |>
  arrange(CDGLOBAL)
```

```{r CDR PROGRESSION}
# Step 1: For those who progressed, get the earliest progression day per BID
cdr_progression_weeks <- CDR_ind %>%
  filter(EPOCH != "OPEN LABEL TREATMENT") %>%  # remove open label
  filter(CDEVENT == 1) %>%                      # only progressed events
  group_by(BID) %>%
  slice_min(order_by = CDDY, n = 1, with_ties = FALSE) %>%  # earliest progression
  ungroup() %>%
  mutate(Progression_Week = CDDY / 7) %>%
  select(BID, Progression_Week)

# Step 2: Get the full list of unique BIDs observed (excluding open label)
all_subjects <- CDR_ind %>%
  filter(EPOCH != "OPEN LABEL TREATMENT") %>%
  distinct(BID)

# Step 3: Join progression weeks back onto all subjects, preserving all BIDs
cdr_progression_complete <- all_subjects %>%
  left_join(cdr_progression_weeks, by = "BID")

```

```{r}
adqs_placebo <- ADQS_raw %>%
  filter(TX == "Placebo") %>%
  select(BID, QSTESTCD, QSTEST, QSCHANGE, ADURW)

# Step 2: Merge with cdr_progression_complete by BID
final_data <- cdr_progression_complete %>%
  left_join(adqs_placebo, by = "BID")
make_wide_test_scores <- function(adqs_data, test_code, target_weeks, window_weeks) {
  is_cfi_adl <- test_code %in% c("CFITOTAL", "CFISP", "CFIPT", "ADLTOTAL", "ADLPQPT", "ADLPQSP")
  
  # Filter & clean test data, using QSCHANGE
  test_data <- adqs_data |>
    filter(toupper(QSTESTCD) == test_code, TX == "Placebo") |>
    select(BID, WEEK = ADURW, SCORE = QSCHANGE) |>
    filter(!is.na(WEEK), !is.na(SCORE))
  
  if (nrow(test_data) == 0) return(NULL)
  
  # Closest visit to each target week
  closest <- test_data |>
    mutate(
      tmp = map(WEEK, ~ abs(.x - target_weeks)),
      target_week = map_int(tmp, ~ target_weeks[which.min(.x)])
    ) |>
    select(-tmp) |>
    filter(abs(WEEK - target_week) <= window_weeks) |>
    group_by(BID, target_week) |>
    slice_min(order_by = abs(WEEK - target_week), n = 1, with_ties = FALSE) |>
    ungroup()

  # Remove all baseline timepoints (e.g., week 0 or screening)
  followup <- closest |>
    filter(target_week > 0)

  # Pivot follow-up into wide format
  wide_followup <- followup |>
    mutate(varname = paste0(test_code, "_", target_week)) |>
    select(BID, varname, SCORE) |>
    pivot_wider(names_from = varname, values_from = SCORE)

  return(wide_followup)
}

test_codes <- c("MMSE", "ADLTOTAL", "ADLPQPT", "LMIIA", "CFITOTAL", 
                "ADLPQSP", "CFISP", "PACC", "DIGIT", "CFIPT", "FCSRT96")

target_weeks <- c(0, 48, 108, 168, 204, 240)

# Generate and reduce all wide test datasets
wide_tests_combined <- purrr::map(test_codes, ~ make_wide_test_scores(
  adqs_data = ADQS_raw,
  test_code = .x,
  target_weeks = target_weeks,
  window_weeks = 14
)) |>
  reduce(full_join, by = "BID")
wide_tests_combined <- wide_tests_combined %>%
  left_join(cdr_progression_complete, by = "BID")
# Create final survival dataset
survival_data <-  wide_tests_combined %>%
  mutate(
    time_to_event = ifelse(is.na(Progression_Week), 240, pmin(Progression_Week, 240)),
    event_indicator = ifelse(!is.na(Progression_Week) & Progression_Week <= 240, 1, 0))

```


```{r}
run_km_single_test <- function(data, test_var) {
  survival_data <- data %>%
    mutate(
      time = time_to_event,
      status = event_indicator
    )

  this_data <- survival_data %>%
    select(BID, time, status, !!sym(test_var)) %>%
    drop_na() %>%
    mutate(
      Quartile = ntile(.data[[test_var]], 4),
      Quartile = factor(Quartile, levels = 1:4, labels = paste0("Q", 1:4))
    )

  fit <- survfit(Surv(time, status) ~ Quartile, data = this_data)

  plot <- ggsurvplot(
    fit,
    data = this_data,
    risk.table = TRUE,
    pval = TRUE,
    title = paste("KM Curve for", test_var),
    xlab = "Weeks",
    ylab = "CDR-Free Probability",
    legend.title = "Quartile",
    xlim = c(0, 240),
    break.time.by = 48,
    palette = "Dark2"
  )

  return(plot)
}
run_km_single_test(survival_data, "MMSE_48")
run_km_single_test(survival_data, "MMSE_108")
run_km_single_test(survival_data, "MMSE_168")
run_km_single_test(survival_data, "MMSE_240")
```

```{r}
library(survival)
library(survminer)
library(dplyr)
library(rlang)
library(broom)
library(forcats)
library(ggplot2)

# ---- KM Plot Function ----
run_km_all_tests_all_times <- function(data, test_vars, time_points) {
  results <- list()
  
  survival_data <- data %>%
    mutate(time = time_to_event, status = event_indicator)
  
  for (test in test_vars) {
    for (tp in time_points) {
      test_col <- paste0(test, "_", tp)
      
      if (!test_col %in% colnames(survival_data)) {
        warning(paste("Column", test_col, "not found. Skipping."))
        next
      }
      
      this_data <- survival_data %>%
        select(BID, time, status, !!sym(test_col)) %>%
        drop_na() %>%
        mutate(
          Quartile = ntile(.data[[test_col]], 4),
          Quartile = factor(Quartile, levels = 1:4, labels = paste0("Q", 1:4))
        )
      
      if (nrow(this_data) < 10) {
        warning(paste("Too few rows after filtering for", test_col))
        next
      }

      fit <- survfit(Surv(time, status) ~ Quartile, data = this_data)
      
      plot <- ggsurvplot(
        fit,
        data = this_data,
        risk.table = TRUE,
        pval = TRUE,
        title = paste("KM Curve for", test, "at Week", tp),
        xlab = "Weeks",
        ylab = "CDR-Free Probability",
        legend.title = "Quartile",
        xlim = c(0, 240),
        break.time.by = 48,
        palette = "Dark2"
      )
      
      key <- paste(test, tp, sep = "_")
      results[[key]] <- plot
    }
  }
  
  return(results)
}

# ---- Cox HR Extraction Function ----
extract_hr_table <- function(data, test_vars, time_points) {
  hr_results <- list()
  
  survival_data <- data %>%
    mutate(time = time_to_event, status = event_indicator)
  
  for (test in test_vars) {
    for (tp in time_points) {
      test_col <- paste0(test, "_", tp)
      if (!test_col %in% names(survival_data)) next
      
      this_data <- survival_data %>%
        select(BID, time, status, !!sym(test_col)) %>%
        drop_na() %>%
        mutate(
          Quartile = ntile(.data[[test_col]], 4),
          Quartile = factor(Quartile, levels = 1:4, labels = paste0("Q", 1:4))
        )
      
      if (n_distinct(this_data$Quartile) < 2) next
      
      this_data$Quartile <- relevel(this_data$Quartile, ref = "Q1")
      
      cox_model <- coxph(Surv(time, status) ~ Quartile, data = this_data)
      model_summary <- tidy(cox_model, exponentiate = TRUE, conf.int = TRUE)
      
      model_summary <- model_summary %>%
        filter(grepl("Quartile", term)) %>%
        mutate(
          Test = test,
          Time = tp,
          Comparison = gsub("Quartile", "", term)
        )
      
      hr_results[[paste(test, tp, sep = "_")]] <- model_summary
    }
  }
  
  hr_df <- bind_rows(hr_results)
  return(hr_df)
}

# ---- Parameters ----
test_vars <- c("MMSE", "ADLTOTAL", "ADLPQPT", "LMIIA", "CFITOTAL", 
               "ADLPQSP", "CFISP", "PACC", "DIGIT", "CFIPT", "FCSRT96")
time_points <- c(48, 108, 168, 204, 240)

# ---- Generate KM Plots ----
plots_list <- run_km_all_tests_all_times(survival_data, test_vars, time_points)

# ---- Save KM Plots ----
for (name in names(plots_list)) {
  ggsave(filename = paste0(name, ".png"), plot = plots_list[[name]]$plot, width = 8, height = 6)
}

# ---- Extract and Plot Hazard Ratios ----
hr_table <- extract_hr_table(survival_data, test_vars, time_points)

hr_table <- hr_table %>%
  mutate(
    label = paste0(Test, " @ ", Time, "w\n", Comparison, " vs Q1"),
    label = fct_rev(factor(label))
  )

forest_plot <- ggplot(hr_table, aes(x = estimate, y = label)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
  geom_vline(xintercept = 1, linetype = "dashed", color = "grey40") +
  scale_x_log10() +
  labs(
    title = "Hazard Ratios for CDR Progression by Quartile",
    x = "Hazard Ratio (log scale)",
    y = NULL
  ) +
  theme_bw(base_size = 12)

ggsave("test.png", forest_plot, width = 10, height = 49, dpi = 300)

```

```{r}
library(survival)
library(survminer)
library(dplyr)
library(rlang)
library(broom)
library(forcats)
library(ggplot2)

# ---- KM Plot Function ----
run_km_all_tests_all_times <- function(data, test_vars, time_points) {
  results <- list()
  
  survival_data <- data %>%
    mutate(time = time_to_event, status = event_indicator)
  
  for (test in test_vars) {
    for (tp in time_points) {
      test_col <- paste0(test, "_", tp)
      
      if (!test_col %in% colnames(survival_data)) {
        warning(paste("Column", test_col, "not found. Skipping."))
        next
      }
      
      this_data <- survival_data %>%
        select(BID, time, status, !!sym(test_col)) %>%
        drop_na() %>%
        mutate(
          Quartile = ntile(.data[[test_col]], 4),
          Quartile = factor(Quartile, levels = 1:4, labels = paste0("Q", 1:4))
        )
      
      if (nrow(this_data) < 10) {
        warning(paste("Too few rows after filtering for", test_col))
        next
      }

      fit <- survfit(Surv(time, status) ~ Quartile, data = this_data)
      
      plot <- ggsurvplot(
        fit,
        data = this_data,
        risk.table = TRUE,
        pval = TRUE,
        title = paste("KM Curve for", test, "at Week", tp),
        xlab = "Weeks",
        ylab = "CDR-Free Probability",
        legend.title = "Quartile",
        xlim = c(0, 240),
        break.time.by = 48,
        palette = "Dark2"
      )
      
      key <- paste(test, tp, sep = "_")
      results[[key]] <- plot
    }
  }
  
  return(results)
}

# ---- Cox HR Extraction Function ----
extract_hr_table <- function(data, test_vars, time_points) {
  hr_results <- list()
  
  survival_data <- data %>%
    mutate(time = time_to_event, status = event_indicator)
  
  for (test in test_vars) {
    for (tp in time_points) {
      test_col <- paste0(test, "_", tp)
      if (!test_col %in% names(survival_data)) next
      
      this_data <- survival_data %>%
        select(BID, time, status, !!sym(test_col)) %>%
        drop_na() %>%
        mutate(
          Quartile = ntile(.data[[test_col]], 4),
          Quartile = factor(Quartile, levels = 1:4, labels = paste0("Q", 1:4))
        )
      
      if (n_distinct(this_data$Quartile) < 2) next
      
      this_data$Quartile <- relevel(this_data$Quartile, ref = "Q1")
      
      cox_model <- coxph(Surv(time, status) ~ Quartile, data = this_data)
      model_summary <- tidy(cox_model, exponentiate = TRUE, conf.int = TRUE)
      
      model_summary <- model_summary %>%
        filter(grepl("Quartile", term)) %>%
        mutate(
          Test = test,
          Time = tp,
          Comparison = gsub("Quartile", "", term)
        )
      
      hr_results[[paste(test, tp, sep = "_")]] <- model_summary
    }
  }
  
  hr_df <- bind_rows(hr_results)
  return(hr_df)
}

# ---- Parameters ----
test_vars <- c("MMSE", "ADLTOTAL", "ADLPQPT", "LMIIA", "CFITOTAL", 
               "ADLPQSP", "CFISP", "PACC", "DIGIT", "CFIPT", "FCSRT96")
time_points <- c(48, 108, 168, 204, 240)

# ---- Generate KM Plots ----
plots_list <- run_km_all_tests_all_times(survival_data, test_vars, time_points)

# ---- Save KM Plots ----
for (name in names(plots_list)) {
  ggsave(filename = paste0(name, ".png"), plot = plots_list[[name]]$plot, width = 8, height = 6)
}

# ---- Extract and Plot Hazard Ratios ----
hr_table <- extract_hr_table(survival_data, test_vars, time_points)

# Create label and order it by Test, then Time, then Comparison
hr_table <- hr_table %>%
  mutate(
    label = paste0(Test, " @ ", Time, "w: Q", Comparison, " vs Q1")
  ) %>%
  arrange(Test, Time, Comparison) %>%
  mutate(label = factor(label, levels = unique(label)))  # Ordered by Test first, then Time

# ---- Forest Plot ----
forest_plot <- ggplot(hr_table, aes(x = estimate, y = label)) +
  geom_point() +
  geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
  geom_vline(xintercept = 1, linetype = "dashed", color = "grey40") +
  scale_x_log10() +
  labs(
    title = "Hazard Ratios for CDR Progression by Quartile",
    x = "Hazard Ratio (log scale)",
    y = NULL
  ) +
  theme_bw(base_size = 12)

ggsave("test.png", forest_plot, width = 10, height = 30, dpi = 300)

```

```{r}
# ---- Forest Plots per Test ----
library(ggplot2)
library(dplyr)

# Organize HR data for per-test plotting
hr_table <- hr_table %>%
  mutate(
    label = paste0("Week ", Time, ": Q", Comparison, " vs Q1")
  ) %>%
  arrange(Test, Time, Comparison)

# Get unique tests
tests <- unique(hr_table$Test)

# Loop over each test and make a forest plot
for (t in tests) {
  test_data <- hr_table %>%
    filter(Test == t) %>%
    mutate(label = factor(label, levels = unique(label)))  # preserves time order
  
  p <- ggplot(test_data, aes(x = estimate, y = label)) +
    geom_point() +
    geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2) +
    geom_vline(xintercept = 1, linetype = "dashed", color = "grey40") +
    scale_x_log10() +
    labs(
      title = paste("Hazard Ratios by Quartile for", t),
      x = "Hazard Ratio (log scale)",
      y = NULL
    ) +
    theme_bw(base_size = 12)
  
  ggsave(paste0("forestplot_", t, ".png"), p, width = 8, height = 6, dpi = 300)
}

```

